(() => { let e = document.querySelector.bind(document), t = document.querySelectorAll.bind(document), n = e("#txt"), l = e("#srt"), o = e("#selectFile"), i = e("#make-btn"), a = e("#save-btn"), r = e("#saveAsFilePicker"), c = e("#zsm-btn"); function d(e) { let t = (e = Math.floor(e / 1e3)) % 1e3, n = (e = Math.floor(e / 1e3)) % 60, l = (e = Math.floor(e / 60)) % 60, o = s(e = Math.floor(e / 60), 2); return l = s(l, 2), n = s(n, 2), t = s(t, 3), o + ":" + l + ":" + n + "," + t } function s(e, t) { return e.toString().padStart(t, "0") } function u(t = !1) { let n = e("#srt").value; if (!n.trim()) return alert("尚未生成字幕文本"), !1; let l = e("#filename").value || "jianyin_srt_by_mzhren", o = e('input[name="filetype"]:checked'), i = o.value; o.id.match("srt") ? l += ".srt" : (l += ".txt", o.id.match("txt2") && (n = function (e) { let t = /\d+\n(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/g, n = /\n\n/g, l = e.replace(t, ""); return l = l.replace(n, ""), l }(n))); let a = new Blob([n], { type: i }); t ? async function (e, t) { const n = await window.showSaveFilePicker(), l = await n.createWritable(); await l.write(e), await l.close(), alert("另存成功！") }(a) : function (e, t) { if (window.navigator.msSaveOrOpenBlob) window.navigator.msSaveOrOpenBlob(e, t); else { var n = document.createElement("a"), l = URL.createObjectURL(e); n.href = l, n.download = t, document.body.appendChild(n), n.click(), setTimeout((function () { document.body.removeChild(n), window.URL.revokeObjectURL(l) }), 0) } }(a, l) } function f() { $filterItems = t('[name="filter"]:checked'); let e = l.value.trim(); e && ($filterItems.forEach((t => { let n = new RegExp(t.value, "gm"); e = e.replace(n, "") })), l.value = e) } function m() { const t = e("#old_text").value.trim(), n = e("#new_text").value.trim(); let o = l.value.trim(); if (!o) return; let i = new RegExp(t, "gm"); o = o.replace(i, n), l.value = o } window.showSaveFilePicker && (e("#saveAsFilePicker").style.display = "inline-block"), "jy.mzh.ren" == document.location.host ? e("#ads_1").style.display = "block" : e("#ads_default").style.display = "block", document.addEventListener("DOMContentLoaded", (function () { !function () { let t = "<label>删除语气词：</label>";["呢", "啊", "嗯", "呃", "哎", "唉", "哦", "那么", "一直", "就是", "所以", "然后", "什么", "那样的", "大概", "这样的", "可能", "这个", "那个", "这", "那么个", "这么个"].forEach(((e, n) => { t += function (e, t) { return `<span><input type="checkbox" name="filter" id="${t}" value="${e}"><label for="${t}">${e}</label></span>` }(e, "f" + n) })), t += '<button id="filterBtn">应用</button>', e("#filters").innerHTML = t }(), e("#filterBtn").addEventListener("click", f), e("#replaceBtn").addEventListener("click", m), e("#optsBtn").addEventListener("click", (function () { e("#options-box").style.display = "block" == e("#options-box").style.display ? "none" : "block" })) }), !1), o.addEventListener("change", (function () { !function (e) { let t = e.files[0], l = new FileReader; l.readAsText(t), l.onload = function () { n.value = l.result }, l.onerror = function () { console.log(l.error) } }(this) })), i.addEventListener("click", (function () { try { let t = n.value, o = function (t) { let n = [], l = t.materials, o = {}, i = l.texts, a = l.videos; for (let e in i) o[i[e].id] = { content: i[e].content, index: e }; return function (e) { let t = []; return e && e.length && e.forEach((e => { "text" != e.type && "sticker" != e.type || (t = t.concat(e.segments)) })), t }(t.tracks).forEach((e => { let t = o[e.material_id]; t && (t.start = d(e.target_timerange.start), t.end = d(e.target_timerange.start + e.target_timerange.duration), n.push(t)) })), function (t) { let n = t[0] ? t[0].material_name : null; n && (e("#filename").value = n.split(".")[0]) }(a), n }(JSON.parse(t)), i = function (e) { let t = ""; return e.forEach((e => { let n = "\n"; t += parseInt(e.index) + 1 + n + e.start + " --\x3e " + e.end + n + e.content + n + n })), t }(o); l.value = i, console.log("生成完毕") } catch (t) { console.log(t), alert("未选择文件或解析错误") } })), a.addEventListener("click", (() => { u() })), r.addEventListener("click", u), c.addEventListener("click", (function () { "block" == e("#zsm-img").style.display ? e("#zsm-img").style.display = "none" : e("#zsm-img").style.display = "block" })) })(), (() => { function e(e) { return decodeURIComponent(window.atob(e)) } document.addEventListener("DOMContentLoaded", (function () { !function (e, t) { console.log(e, t); var n = top.window.location.hostname; -1 == n.indexOf(e) && "localhost" != n && top.window.location.assign(t) }(e("bXpoLnJlbg=="), e("aHR0cHM6Ly9qeS5temgucmVuLw==")) })) })();